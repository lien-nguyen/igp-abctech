---
- name: Deploy ABCtechnologies to Kubernetes
  hosts: k8s-masters
  become: yes
  vars:
    app_name: abctechnologies
    app_version: "{{ build_number | default('latest') }}"
    namespace: abctech
    k8s_manifests_path: "/tmp/k8s-manifests"
    docker_registry: "{{ docker_registry_url | default('localhost:5000') }}"
    
  tasks:
    - name: Ensure kubectl is installed
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version | default('v1.25.0') }}/bin/linux/amd64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: '0755'
      
    - name: Create manifests directory
      file:
        path: "{{ k8s_manifests_path }}"
        state: directory
        mode: '0755'
        
    - name: Copy Kubernetes manifests
      copy:
        src: "{{ item }}"
        dest: "{{ k8s_manifests_path }}/"
        mode: '0644'
      with_fileglob:
        - "../k8s/*.yaml"
        
    - name: Update deployment image in manifest
      replace:
        path: "{{ k8s_manifests_path }}/deployment.yaml"
        regexp: 'image: localhost:5000/abctechnologies:latest'
        replace: 'image: {{ docker_registry }}/{{ app_name }}:{{ app_version }}'
        
    - name: Apply namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ namespace }}"
            labels:
              name: "{{ namespace }}"
              environment: production
              
    - name: Apply ConfigMap
      kubernetes.core.k8s:
        state: present
        src: "{{ k8s_manifests_path }}/configmap.yaml"
        
    - name: Apply Deployment
      kubernetes.core.k8s:
        state: present
        src: "{{ k8s_manifests_path }}/deployment.yaml"
        wait: true
        wait_condition:
          type: Progressing
          status: "True"
          reason: NewReplicaSetAvailable
        wait_timeout: 600
        
    - name: Apply Service
      kubernetes.core.k8s:
        state: present
        src: "{{ k8s_manifests_path }}/service.yaml"
        
    - name: Wait for deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ app_name }}-deployment"
        namespace: "{{ namespace }}"
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
        
    - name: Get service information
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: "{{ app_name }}-service"
        namespace: "{{ namespace }}"
      register: service_info
      
    - name: Display service information
      debug:
        msg: |
          Service deployed successfully!
          Service Name: {{ app_name }}-service
          Namespace: {{ namespace }}
          {% if service_info.resources[0].status.loadBalancer.ingress is defined %}
          LoadBalancer IP: {{ service_info.resources[0].status.loadBalancer.ingress[0].ip }}
          {% endif %}
          NodePort: 30080
          
    - name: Get pod status
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ namespace }}"
        label_selectors:
          - app={{ app_name }}
      register: pod_info
      
    - name: Display pod information
      debug:
        msg: |
          Pods Status:
          {% for pod in pod_info.resources %}
          - {{ pod.metadata.name }}: {{ pod.status.phase }}
          {% endfor %}
