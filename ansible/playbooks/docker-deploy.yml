---
- name: Build and Deploy Docker Image for ABCtechnologies
  hosts: docker-hosts
  become: yes
  vars:
    app_name: abctechnologies
    app_version: "{{ build_number | default('latest') }}"
    docker_registry: "{{ docker_registry_url | default('localhost:5000') }}"
    war_file_path: "/tmp/ABCtechnologies-1.0.war"
    
  tasks:
    - name: Ensure Docker is installed
      package:
        name: docker.io
        state: present
      
    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes
        
    - name: Add ansibleadmin user to docker group
      user:
        name: ansibleadmin
        groups: docker
        append: yes
        
    - name: Create application directory
      file:
        path: /opt/{{ app_name }}
        state: directory
        mode: '0755'
        
    - name: Copy WAR file to target host
      copy:
        src: "{{ war_file_path }}"
        dest: "/opt/{{ app_name }}/ABCtechnologies-1.0.war"
        mode: '0644'
      when: war_file_path is defined
      
    - name: Create Dockerfile for application
      template:
        src: Dockerfile.j2
        dest: "/opt/{{ app_name }}/Dockerfile"
        mode: '0644'
        
    - name: Build Docker image
      docker_image:
        name: "{{ docker_registry }}/{{ app_name }}"
        tag: "{{ app_version }}"
        build:
          path: "/opt/{{ app_name }}"
          dockerfile: Dockerfile
        source: build
        state: present
        
    - name: Tag image with latest
      docker_image:
        name: "{{ docker_registry }}/{{ app_name }}"
        repository: "{{ docker_registry }}/{{ app_name }}"
        tag: latest
        source: local
        
    - name: Push image to registry (if registry is configured)
      docker_image:
        name: "{{ docker_registry }}/{{ app_name }}"
        tag: "{{ app_version }}"
        push: yes
        source: local
      when: docker_registry != "localhost:5000"
      
    - name: Remove old containers
      docker_container:
        name: "{{ app_name }}-container"
        state: absent
        
    - name: Run new container
      docker_container:
        name: "{{ app_name }}-container"
        image: "{{ docker_registry }}/{{ app_name }}:{{ app_version }}"
        state: started
        restart_policy: always
        ports:
          - "8080:8080"
        env:
          JAVA_OPTS: "-Xmx512m -Xms256m"
